# Generated by Django 5.2.5 on 2025-08-31 18:51

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cadmaflow_models', '0002_workflow_frozen_at_workflow_frozen_by_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AbsorptionData',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value_json', models.TextField(help_text='Valor serializado como JSON para soportar cualquier tipo de dato')),
                ('native_type', models.CharField(choices=[('FLOAT', 'Número decimal'), ('INTEGER', 'Número entero'), ('BOOLEAN', 'Valor booleano'), ('STRING', 'Texto'), ('LIST', 'Lista de valores'), ('DICT', 'Diccionario/objeto'), ('COMPLEX', 'Tipo complejo personalizado')], help_text='Tipo de dato nativo que representa este valor', max_length=20)),
                ('source', models.CharField(choices=[('USER', 'Usuario'), ('TEST', 'T.E.S.T.'), ('AMBIT', 'AMBIT'), ('PROTOX', 'ProTox'), ('DRUGBILITY', 'Drugbility'), ('GAUSSIAN', 'Gaussian'), ('EXPERIMENTAL', 'Experimental'), ('OTHER', 'Otro')], default='USER', max_length=20)),
                ('source_name', models.CharField(help_text="Ej: 'logP-calc'", max_length=100)),
                ('source_version', models.CharField(blank=True, help_text='Versión del software', max_length=50)),
                ('property_name', models.CharField(default='', help_text='Nombre lógico de la propiedad calculada', max_length=100)),
                ('user_tag', models.CharField(blank=True, help_text='Etiqueta para distinguir diferentes entradas del usuario', max_length=100)),
                ('confidence_score', models.FloatField(default=1.0, help_text='0-1, 1 = máxima confianza', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_approved', models.BooleanField(default=False)),
                ('is_frozen', models.BooleanField(default=False, help_text='Si está congelado, no debe modificarse')),
                ('frozen_at', models.DateTimeField(blank=True, null=True)),
                ('data_retrieval_config', models.JSONField(blank=True, default=dict, help_text='Configuración específica para obtener este tipo de dato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frozen_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='frozen_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('molecule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='cadmaflow_models.molecule')),
                ('provider_execution', models.ForeignKey(blank=True, help_text='Ejecución del provider que generó este dato', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_records', to='cadmaflow_models.providerexecution')),
            ],
        ),
        migrations.CreateModel(
            name='LogPData',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value_json', models.TextField(help_text='Valor serializado como JSON para soportar cualquier tipo de dato')),
                ('native_type', models.CharField(choices=[('FLOAT', 'Número decimal'), ('INTEGER', 'Número entero'), ('BOOLEAN', 'Valor booleano'), ('STRING', 'Texto'), ('LIST', 'Lista de valores'), ('DICT', 'Diccionario/objeto'), ('COMPLEX', 'Tipo complejo personalizado')], help_text='Tipo de dato nativo que representa este valor', max_length=20)),
                ('source', models.CharField(choices=[('USER', 'Usuario'), ('TEST', 'T.E.S.T.'), ('AMBIT', 'AMBIT'), ('PROTOX', 'ProTox'), ('DRUGBILITY', 'Drugbility'), ('GAUSSIAN', 'Gaussian'), ('EXPERIMENTAL', 'Experimental'), ('OTHER', 'Otro')], default='USER', max_length=20)),
                ('source_name', models.CharField(help_text="Ej: 'logP-calc'", max_length=100)),
                ('source_version', models.CharField(blank=True, help_text='Versión del software', max_length=50)),
                ('property_name', models.CharField(default='', help_text='Nombre lógico de la propiedad calculada', max_length=100)),
                ('user_tag', models.CharField(blank=True, help_text='Etiqueta para distinguir diferentes entradas del usuario', max_length=100)),
                ('confidence_score', models.FloatField(default=1.0, help_text='0-1, 1 = máxima confianza', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_approved', models.BooleanField(default=False)),
                ('is_frozen', models.BooleanField(default=False, help_text='Si está congelado, no debe modificarse')),
                ('frozen_at', models.DateTimeField(blank=True, null=True)),
                ('data_retrieval_config', models.JSONField(blank=True, default=dict, help_text='Configuración específica para obtener este tipo de dato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frozen_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='frozen_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('molecule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='cadmaflow_models.molecule')),
                ('provider_execution', models.ForeignKey(blank=True, help_text='Ejecución del provider que generó este dato', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_records', to='cadmaflow_models.providerexecution')),
            ],
        ),
        migrations.CreateModel(
            name='MutagenicityData',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value_json', models.TextField(help_text='Valor serializado como JSON para soportar cualquier tipo de dato')),
                ('native_type', models.CharField(choices=[('FLOAT', 'Número decimal'), ('INTEGER', 'Número entero'), ('BOOLEAN', 'Valor booleano'), ('STRING', 'Texto'), ('LIST', 'Lista de valores'), ('DICT', 'Diccionario/objeto'), ('COMPLEX', 'Tipo complejo personalizado')], help_text='Tipo de dato nativo que representa este valor', max_length=20)),
                ('source', models.CharField(choices=[('USER', 'Usuario'), ('TEST', 'T.E.S.T.'), ('AMBIT', 'AMBIT'), ('PROTOX', 'ProTox'), ('DRUGBILITY', 'Drugbility'), ('GAUSSIAN', 'Gaussian'), ('EXPERIMENTAL', 'Experimental'), ('OTHER', 'Otro')], default='USER', max_length=20)),
                ('source_name', models.CharField(help_text="Ej: 'logP-calc'", max_length=100)),
                ('source_version', models.CharField(blank=True, help_text='Versión del software', max_length=50)),
                ('property_name', models.CharField(default='', help_text='Nombre lógico de la propiedad calculada', max_length=100)),
                ('user_tag', models.CharField(blank=True, help_text='Etiqueta para distinguir diferentes entradas del usuario', max_length=100)),
                ('confidence_score', models.FloatField(default=1.0, help_text='0-1, 1 = máxima confianza', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_approved', models.BooleanField(default=False)),
                ('is_frozen', models.BooleanField(default=False, help_text='Si está congelado, no debe modificarse')),
                ('frozen_at', models.DateTimeField(blank=True, null=True)),
                ('data_retrieval_config', models.JSONField(blank=True, default=dict, help_text='Configuración específica para obtener este tipo de dato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frozen_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='frozen_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('molecule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='cadmaflow_models.molecule')),
                ('provider_execution', models.ForeignKey(blank=True, help_text='Ejecución del provider que generó este dato', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_records', to='cadmaflow_models.providerexecution')),
            ],
        ),
        migrations.CreateModel(
            name='ToxicityData',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value_json', models.TextField(help_text='Valor serializado como JSON para soportar cualquier tipo de dato')),
                ('native_type', models.CharField(choices=[('FLOAT', 'Número decimal'), ('INTEGER', 'Número entero'), ('BOOLEAN', 'Valor booleano'), ('STRING', 'Texto'), ('LIST', 'Lista de valores'), ('DICT', 'Diccionario/objeto'), ('COMPLEX', 'Tipo complejo personalizado')], help_text='Tipo de dato nativo que representa este valor', max_length=20)),
                ('source', models.CharField(choices=[('USER', 'Usuario'), ('TEST', 'T.E.S.T.'), ('AMBIT', 'AMBIT'), ('PROTOX', 'ProTox'), ('DRUGBILITY', 'Drugbility'), ('GAUSSIAN', 'Gaussian'), ('EXPERIMENTAL', 'Experimental'), ('OTHER', 'Otro')], default='USER', max_length=20)),
                ('source_name', models.CharField(help_text="Ej: 'logP-calc'", max_length=100)),
                ('source_version', models.CharField(blank=True, help_text='Versión del software', max_length=50)),
                ('property_name', models.CharField(default='', help_text='Nombre lógico de la propiedad calculada', max_length=100)),
                ('user_tag', models.CharField(blank=True, help_text='Etiqueta para distinguir diferentes entradas del usuario', max_length=100)),
                ('confidence_score', models.FloatField(default=1.0, help_text='0-1, 1 = máxima confianza', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_approved', models.BooleanField(default=False)),
                ('is_frozen', models.BooleanField(default=False, help_text='Si está congelado, no debe modificarse')),
                ('frozen_at', models.DateTimeField(blank=True, null=True)),
                ('data_retrieval_config', models.JSONField(blank=True, default=dict, help_text='Configuración específica para obtener este tipo de dato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frozen_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='frozen_%(class)s', to=settings.AUTH_USER_MODEL)),
                ('molecule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='cadmaflow_models.molecule')),
                ('provider_execution', models.ForeignKey(blank=True, help_text='Ejecución del provider que generó este dato', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_records', to='cadmaflow_models.providerexecution')),
            ],
        ),
    ]
